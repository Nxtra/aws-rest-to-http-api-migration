AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  aws-rest-to-http-api-migration

  SAM Template describing the way to implement a basic serverless service using a REST API

Parameters:
  DynamoDBTableName:
    Type: String
    Default: rest-item-table
  S3BucketName:
    Type: String
    Default: REPLACEME

Globals:
  Function:
    Runtime: nodejs12.x
    Tracing: Active
    Timeout: 3
  Api:
    Cors:
      AllowMethods: "'DELETE,GET,POST,PUT'"
      AllowHeaders: "'Authorization,Content-Type'"
      AllowOrigin: "'*'"

Resources:
  RESTApi:
    Type: AWS::Serverless::Api
    Properties:
      TracingEnabled: true
      StageName: dev
      DefinitionBody:
        'Fn::Transform':
          Name: AWS::Include
          Parameters:
            Location: !Join [ '', [ 's3://', !Ref S3BucketName, '/REST-example-openapi-spec.yaml' ] ]

  AddItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/REST/add-item/
      Handler: app.lambdaHandler
      Role: !GetAtt AddItemRole.Arn
      Environment:
        Variables:
          TableName: !Ref RESTItemTable
      Events:
        AddItemEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RESTApi
            Path: /items
            Method: POST

  AddItemRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: RESTAddItemPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt RESTItemTable.Arn
              - Effect: Allow
                Action:
                  - xray:PutTelemetryRecords
                  - xray:PutTraceSegments
                Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute

  GetItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/REST/get-item/
      Handler: app.lambdaHandler
      Role: !GetAtt GetItemRole.Arn
      Environment:
        Variables:
          TableName: !Ref RESTItemTable
      Events:
        GetItemEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RESTApi
            Path: /items/{itemId}
            Method: GET

  GetItemRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: RESTGetItemPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource: !GetAtt RESTItemTable.Arn
              - Effect: Allow
                Action:
                  - xray:PutTelemetryRecords
                  - xray:PutTraceSegments
                Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute

  UpdateItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/REST/update-item/
      Handler: app.lambdaHandler
      Role: !GetAtt UpdateItemRole.Arn
      Environment:
        Variables:
          TableName: !Ref RESTItemTable
      Events:
        UpdateItemEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RESTApi
            Path: /items/{itemId}
            Method: PUT

  UpdateItemRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: RESTUpdateItemPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt RESTItemTable.Arn
              - Effect: Allow
                Action:
                  - xray:PutTelemetryRecords
                  - xray:PutTraceSegments
                Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute

  DeleteItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/REST/delete-item/
      Handler: app.lambdaHandler
      Role: !GetAtt DeleteItemRole.Arn
      Environment:
        Variables:
          TableName: !Ref RESTItemTable
      Events:
        DeleteItemEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RESTApi
            Path: /items/{itemId}
            Method: DELETE

  DeleteItemRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: RESTDeleteItemPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DeleteItem
                Resource: !GetAtt RESTItemTable.Arn
              - Effect: Allow
                Action:
                  - xray:PutTelemetryRecords
                  - xray:PutTraceSegments
                Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute

  RESTItemTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoDBTableName
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
